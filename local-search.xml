<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown学习总结（超详细）</title>
    <link href="/b4dd708b.html"/>
    <url>/b4dd708b.html</url>
    
    <content type="html"><![CDATA[<h1 id="一-Markdown标题"><a href="#一-Markdown标题" class="headerlink" title="一. Markdown标题"></a>一. Markdown标题</h1><p>使用 “#” 符号进行标记<br>使用方法如下:<br>#一级标题<br>##二级标题<br>###三级标题<br>####四级标题<br>#####五级标题<br>######六级标题  </p><p>注意: 上面的 “ # “ 后要跟一个空格,由于本片采用markdown语法进行编写,为方便显示,所以中间没有添加空格,一定要加上空格,这点很重要.  </p><h1 id="二-Markdown段落格式"><a href="#二-Markdown段落格式" class="headerlink" title="二. Markdown段落格式"></a>二. Markdown段落格式</h1><p>markdown没有特殊的段落格式,直接编写文字就行.<br>在换行方面markdown采用每行后面添加一个空格,再敲一个回车实现.<br>具体实现如下:<br>这是一个段落(此处敲两个空格,再敲一个回车,就可以实现换行)<br>这又是一个段落</p><p>开启一个新的段落可以采用中间插入一个空行的方式来实现:<br>具体实现如下:<br>这是一个段落(两句话中间插入一个空行)</p><p>这又是一个段落</p><p>字体显示方面,markdown的使用方式非常简单,主要支持3种字体的显示,<br>分别为 斜体 、粗体、和粗斜体三种.<br>markdown语法采用以下方式实现:<br><em>这是斜体格式语法</em><br><strong>这是粗体语法</strong><br><em><strong>这是粗斜体语法</strong></em></p><h1 id="三-Markdown-列表"><a href="#三-Markdown-列表" class="headerlink" title="三. Markdown 列表"></a>三. Markdown 列表</h1><h1 id="四-Markdown区块"><a href="#四-Markdown区块" class="headerlink" title="四. Markdown区块"></a>四. Markdown区块</h1><h1 id="五-Markdown代码"><a href="#五-Markdown代码" class="headerlink" title="五. Markdown代码"></a>五. Markdown代码</h1><h1 id="六-Markdown链接"><a href="#六-Markdown链接" class="headerlink" title="六. Markdown链接"></a>六. Markdown链接</h1><p>[链接名称] (链接地址)或者使用 &lt;链接地址&gt;</p><h1 id="七-Markdown图片"><a href="#七-Markdown图片" class="headerlink" title="七. Markdown图片"></a>七. Markdown图片</h1><h1 id="八-Markdown表格"><a href="#八-Markdown表格" class="headerlink" title="八. Markdown表格"></a>八. Markdown表格</h1><h1 id="九-Markdown高级技巧"><a href="#九-Markdown高级技巧" class="headerlink" title="九. Markdown高级技巧"></a>九. Markdown高级技巧</h1>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt中使用json类</title>
    <link href="/1a39afc9.html"/>
    <url>/1a39afc9.html</url>
    
    <content type="html"><![CDATA[<h1 id="第一部分-QJsonObject"><a href="#第一部分-QJsonObject" class="headerlink" title="第一部分 QJsonObject"></a>第一部分 QJsonObject</h1><hr><p>说明：封装了JSON中的对象，可以存储多个 键值对 其中，键为字符串  类型，值为  QJsonValue  类型</p><h2 id="1-创建一个QJsonobject对象"><a href="#1-创建一个QJsonobject对象" class="headerlink" title="(1).  创建一个QJsonobject对象"></a>(1).  创建一个QJsonobject对象</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-attribute">QJsonObject</span>::QJsonObject( );<br></code></pre></td></tr></table></figure><h2 id="2-将键值对添加到QJsonObject对象中"><a href="#2-将键值对添加到QJsonObject对象中" class="headerlink" title="(2). 将键值对添加到QJsonObject对象中"></a>(2). 将键值对添加到QJsonObject对象中</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-attribute">QJsonObject</span>::iteratou insert( <span class="hljs-keyword">const</span> QString &amp;key, <span class="hljs-keyword">const</span> QJsonValue &amp;value);<br></code></pre></td></tr></table></figure><h2 id="3-获取QJSONObject对象中-键值对的个数"><a href="#3-获取QJSONObject对象中-键值对的个数" class="headerlink" title="(3).  获取QJSONObject对象中 键值对的个数"></a>(3).  获取QJSONObject对象中 键值对的个数</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-built_in">int</span>  <span class="hljs-attribute">QJsonObject</span>::cout( ) <span class="hljs-keyword">const</span>;<br><span class="hljs-built_in">int</span>  <span class="hljs-attribute">QJsonObject</span>::<span class="hljs-built_in">size</span>( ) <span class="hljs-keyword">const</span>;<br><span class="hljs-built_in">int</span>  <span class="hljs-attribute">QJsonObject</span>::length( ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h2 id="4-通过key得到value"><a href="#4-通过key得到value" class="headerlink" title="(4).  通过key得到value"></a>(4).  通过key得到value</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs QT">QJsonValue <span class="hljs-attribute">QJsonOject</span>::value( <span class="hljs-keyword">const</span> QString &amp;key ) <span class="hljs-keyword">const</span>;<br>QJsonValue <span class="hljs-attribute">QJsonOject</span>::operator[ ]( <span class="hljs-keyword">const</span> QString &amp;key ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h2 id="5-检查key是否存在"><a href="#5-检查key是否存在" class="headerlink" title="(5).  检查key是否存在"></a>(5).  检查key是否存在</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs QT">iterator <span class="hljs-attribute">QJsonObject</span>::find (<span class="hljs-keyword">const</span> QString &amp;key);<br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">QJsonObject</span>::contains(<span class="hljs-keyword">const</span> QString &amp;key);<br></code></pre></td></tr></table></figure><h2 id="6-遍历key"><a href="#6-遍历key" class="headerlink" title="(6).  遍历key"></a>(6).  遍历key</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs QT">QStingList <span class="hljs-attribute">QJsonObject</span>::keys ( ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h1 id="第二部分-QJsonArray"><a href="#第二部分-QJsonArray" class="headerlink" title="第二部分 QJsonArray"></a>第二部分 QJsonArray</h1><hr><p>说明：封装了json中的数组  数组中元素为QJsonValue类型</p><h2 id="1-创建一个QJsonArray"><a href="#1-创建一个QJsonArray" class="headerlink" title="(1).  创建一个QJsonArray"></a>(1).  创建一个QJsonArray</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-attribute">QJsonObject</span>::QJsonArray( );<br></code></pre></td></tr></table></figure><h2 id="2-添加数组元素"><a href="#2-添加数组元素" class="headerlink" title="(2). 添加数组元素"></a>(2). 添加数组元素</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::append(<span class="hljs-keyword">const</span>   QJsonValue &amp;value )；<span class="hljs-comment">//添加到头部</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::prepend(<span class="hljs-keyword">const</span>  QJsonValue &amp;value )；<span class="hljs-comment">//添加到尾部</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::instert ( <span class="hljs-built_in">int</span> i, <span class="hljs-keyword">const</span> QJsonValue &amp;value);<span class="hljs-comment">//插入到 i 的位置之前</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::push_back ( <span class="hljs-keyword">const</span> QJsonValue &amp;value);<span class="hljs-comment">//添加到头部</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::push_front ( <span class="hljs-keyword">const</span> QJsonValue &amp;value);<span class="hljs-comment">//添加到尾部</span><br></code></pre></td></tr></table></figure><h2 id="3-获取QJsonArray中元素的个数"><a href="#3-获取QJsonArray中元素的个数" class="headerlink" title="(3). 获取QJsonArray中元素的个数"></a>(3). 获取QJsonArray中元素的个数</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-built_in">int</span> <span class="hljs-attribute">QJsonArray</span>::count( ) <span class="hljs-keyword">const</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-attribute">QJsonArray</span>::<span class="hljs-built_in">size</span>( ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h2 id="4-获取元素的值"><a href="#4-获取元素的值" class="headerlink" title="(4). 获取元素的值"></a>(4). 获取元素的值</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs QT">QJsonValue <span class="hljs-attribute">QJsonArray</span>::first( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//获得头部</span><br>QJsonValue <span class="hljs-attribute">QJsonArray</span>::last( ) <span class="hljs-keyword">const</span>; <span class="hljs-comment">//获得尾部</span><br><span class="hljs-comment">//获得指定位置的值</span><br>QJsonValue <span class="hljs-attribute">QJsonArray</span>::at( <span class="hljs-built_in">int</span> i ) <span class="hljs-keyword">const</span>;<br>QJsonValue <span class="hljs-attribute">QJsonArray</span>::operator[ ]( <span class="hljs-built_in">int</span> i ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h2 id="5-删除元素"><a href="#5-删除元素" class="headerlink" title="(5). 删除元素"></a>(5). 删除元素</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::pop_back( )；      <span class="hljs-comment">//删除头部</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::pop_front()；      <span class="hljs-comment">//删除尾部</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::removeFirst( )；   <span class="hljs-comment">//删除头部</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::removeLast()；     <span class="hljs-comment">//删除尾部</span><br><span class="hljs-comment">//删除指定位置</span><br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::removeAt ( <span class="hljs-built_in">int</span> i );<br><span class="hljs-keyword">void</span> <span class="hljs-attribute">QJsonArray</span>::takeAt( <span class="hljs-built_in">int</span> i );<br></code></pre></td></tr></table></figure><h1 id="第三部分-QJsonValue"><a href="#第三部分-QJsonValue" class="headerlink" title="第三部分 QJsonValue"></a>第三部分 QJsonValue</h1><h2 id="1-封装json支持6种数据类型"><a href="#1-封装json支持6种数据类型" class="headerlink" title="(1). 封装json支持6种数据类型"></a>(1). 封装json支持6种数据类型</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-attribute">QJsonValue</span>::Bool          <span class="hljs-comment">//布尔类型</span><br><span class="hljs-attribute">QJsonValue</span>::Double        <span class="hljs-comment">//浮点类型（包括整形）</span><br><span class="hljs-attribute">QJsonValue</span>::<span class="hljs-built_in">String</span>        <span class="hljs-comment">//字符串类型</span><br><span class="hljs-attribute">QJsonValue</span>::<span class="hljs-built_in">Array</span>        <span class="hljs-comment">//json数组类型</span><br><span class="hljs-attribute">QJsonValue</span>::<span class="hljs-built_in">Object</span>        <span class="hljs-comment">//json对象类型</span><br><span class="hljs-attribute">QJsonValue</span>::Null        <span class="hljs-comment">//空值类型</span><br></code></pre></td></tr></table></figure><h2 id="2-构造QJsonValue对象"><a href="#2-构造QJsonValue对象" class="headerlink" title="(2).  构造QJsonValue对象"></a>(2).  构造QJsonValue对象</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-comment">//字符串</span><br>QJsonValue ( <span class="hljs-keyword">const</span> char *s );<br>QJsonValue ( QLatinlString s );<br>QJsonValue ( <span class="hljs-keyword">const</span> QString &amp;s  );<br><span class="hljs-comment">//整形 and 浮点形</span><br>QJsonValue ( qint64 v );<br>QJsonValue ( <span class="hljs-built_in">int</span> v );<br>QJsonValue ( <span class="hljs-built_in">double</span> v );<br><span class="hljs-comment">//布尔类型</span><br>QJsonValue (<span class="hljs-built_in">bool</span> b );<br><span class="hljs-comment">//json数组类型</span><br>QJsonValue（ <span class="hljs-keyword">const</span> QJsonObject &amp;o );<br><span class="hljs-comment">//json对象类型</span><br>QJsonValue（<span class="hljs-keyword">const</span> QJsonArray &amp;a );<br><span class="hljs-comment">//空值类型</span><br>QJsonValue（ <span class="hljs-attribute">QJsonValue</span>::Type type = NULL );<br></code></pre></td></tr></table></figure><h2 id="3-判断一个-QJsonValue对象-的数据类型"><a href="#3-判断一个-QJsonValue对象-的数据类型" class="headerlink" title="(3). 判断一个 QJsonValue对象 的数据类型"></a>(3). 判断一个 QJsonValue对象 的数据类型</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isString</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否是字符串类型</span><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isDouble</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否是浮点类型</span><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isBool</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否布尔类型</span><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isObject</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否是json对象类型</span><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isArray</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否json数组类型</span><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isUndefined</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否是未定义类型（ 无法识别的类型 ）类型</span><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">isUNull</span>:( ) <span class="hljs-keyword">const</span>;<span class="hljs-comment">//是否是空值类型</span><br></code></pre></td></tr></table></figure><h2 id="4-转换一个-QJsonValue对象-的数据类型"><a href="#4-转换一个-QJsonValue对象-的数据类型" class="headerlink" title="(4).转换一个 QJsonValue对象 的数据类型"></a>(4).转换一个 QJsonValue对象 的数据类型</h2><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-comment">//转换为字符串类型</span><br>QString toString( ) <span class="hljs-keyword">const</span>;<br>QString toString( <span class="hljs-keyword">const</span> QString &amp;defaultvalue ) <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">//转换为浮点类型</span><br><span class="hljs-built_in">double</span> toDouble( <span class="hljs-built_in">double</span> defaultvalue = <span class="hljs-number">0</span>) <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">//转换为整形</span><br><span class="hljs-built_in">int</span> toInt（ <span class="hljs-built_in">int</span> defaultvalue = <span class="hljs-number">0</span> ）<span class="hljs-keyword">const</span>；<br><span class="hljs-comment">//转换为布尔类型</span><br><span class="hljs-built_in">bool</span> toBool(<span class="hljs-built_in">bool</span> defaultvalue = <span class="hljs-literal">false</span>) <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">//是否是json对象</span><br>QJsonObject toObject( <span class="hljs-built_in">bool</span> defaultvalue =  <span class="hljs-literal">false</span> ) <span class="hljs-keyword">const</span>;<br>QJsonObject toObject( ) <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">//转换为json数组</span><br>QJsonObject toObject( <span class="hljs-built_in">bool</span> defaultvalue =  <span class="hljs-literal">false</span> ) <span class="hljs-keyword">const</span>;<br>QJsonObject toObject( ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h1 id="第四部分-QJsonDocument"><a href="#第四部分-QJsonDocument" class="headerlink" title="第四部分 QJsonDocument"></a>第四部分 QJsonDocument</h1><p>说明：封装了一个完整的JSON文档</p><p>以二进制的方式读取或写入文档  以utf-8形式表示</p><p>QJsonObject和QjsonArray不能直接转换为字符串类型 需要通过QJsonDocuemt类来进行转换</p><h2 id="1-QJsonObject-QjsonArray-gt-字符串"><a href="#1-QJsonObject-QjsonArray-gt-字符串" class="headerlink" title="(1). QJsonObject / QjsonArray =&gt; 字符串"></a>(1). QJsonObject / QjsonArray =&gt; 字符串</h2><h3 id="a-创建QJsonDoucument-对象-以QJsonObject-或-QJsonArray为参数创建QJsonDoucunt-对象"><a href="#a-创建QJsonDoucument-对象-以QJsonObject-或-QJsonArray为参数创建QJsonDoucunt-对象" class="headerlink" title="a. 创建QJsonDoucument 对象  以QJsonObject 或 QJsonArray为参数创建QJsonDoucunt 对象"></a>a. 创建QJsonDoucument 对象  以QJsonObject 或 QJsonArray为参数创建QJsonDoucunt 对象</h3><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-attribute">QJsonDocument</span>::QJsonDoucument( <span class="hljs-keyword">const</span> QJsonObject &amp;object);      <span class="hljs-comment">//第二个为定义的对象名字QJsonDoucument</span><br><span class="hljs-attribute">QJsonDocument</span>::QJsonDoucument( <span class="hljs-keyword">const</span> QJsonArray &amp;object);       <span class="hljs-comment">//第二个为定义的对象名字QJsonDoucument</span><br></code></pre></td></tr></table></figure><h3 id="b-将QJsonDoucument对象中的数据进行序列化"><a href="#b-将QJsonDoucument对象中的数据进行序列化" class="headerlink" title="b . 将QJsonDoucument对象中的数据进行序列化"></a>b . 将QJsonDoucument对象中的数据进行序列化</h3><p> 通过调用toxxx（）方法可以得到文本格式或者二进制格式的JSon字符串</p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs QT">QByteArray <span class="hljs-attribute">QJsonDocument</span>::toBinaryData( ) <span class="hljs-keyword">const</span>;<br>QByteArray <span class="hljs-attribute">QJsonDocument</span>::toJson( ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h3 id="c-使用得到的字符串进行数据传输，或者保存到文件"><a href="#c-使用得到的字符串进行数据传输，或者保存到文件" class="headerlink" title="c. 使用得到的字符串进行数据传输，或者保存到文件"></a>c. 使用得到的字符串进行数据传输，或者保存到文件</h3><h2 id="2-字符串-gt-QJsonObject-QjsonArray"><a href="#2-字符串-gt-QJsonObject-QjsonArray" class="headerlink" title="(2).字符串 =&gt; QJsonObject / QjsonArray"></a>(2).字符串 =&gt; QJsonObject / QjsonArray</h2><h3 id="a-将-JSON字符串转换为-QJsonDoucument-对象"><a href="#a-将-JSON字符串转换为-QJsonDoucument-对象" class="headerlink" title="a. 将 JSON字符串转换为 QJsonDoucument 对象"></a>a. 将 JSON字符串转换为 QJsonDoucument 对象</h3><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs QT">[static] QJsonDocument  <span class="hljs-attribute">QJsonDoucument</span>::fromBinaryData( <span class="hljs-keyword">const</span> QJsonArray &amp;data, Datavalidation validation = validation);<br>[static] QJsonDocument  <span class="hljs-attribute">QJsonDoucument</span>::fromjson( <span class="hljs-keyword">const</span> QJsonArray &amp;json,QJsonParseError * error = Q_NULLPTR);<br></code></pre></td></tr></table></figure><h3 id="3-将QJsonDoucument对象-转换为json数组-对象"><a href="#3-将QJsonDoucument对象-转换为json数组-对象" class="headerlink" title="(3). 将QJsonDoucument对象 转换为json数组 /对象"></a>(3). 将QJsonDoucument对象 转换为json数组 /对象</h3><h4 id="a-判断文档对象中存储的数据，是JSON-数组还是JSON-对象"><a href="#a-判断文档对象中存储的数据，是JSON-数组还是JSON-对象" class="headerlink" title="a. 判断文档对象中存储的数据，是JSON 数组还是JSON 对象"></a>a. 判断文档对象中存储的数据，是JSON 数组还是JSON 对象</h4><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs QT"><span class="hljs-built_in">bool</span> <span class="hljs-attribute">QJsonDocument</span>::<span class="hljs-attribute">isArray</span>:() <span class="hljs-keyword">const</span>;<br><br><span class="hljs-built_in">bool</span> <span class="hljs-attribute">QJsonDocument</span>::isObject() <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h4 id="b-之后就可以转换为数组或JSON对象"><a href="#b-之后就可以转换为数组或JSON对象" class="headerlink" title="b. 之后就可以转换为数组或JSON对象"></a>b. 之后就可以转换为数组或JSON对象</h4><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs QT">QJsonObject <span class="hljs-attribute">QJSONDocument</span>::<span class="hljs-attribute">object</span>:( ) <span class="hljs-keyword">const</span>;<br><br>QJsonArray <span class="hljs-attribute">QJsonDocument</span>::array( ) <span class="hljs-keyword">const</span>;<br></code></pre></td></tr></table></figure><h4 id="c-调用QJsonArray-QJsonObject-类提供api获取存储在其中的数据"><a href="#c-调用QJsonArray-QJsonObject-类提供api获取存储在其中的数据" class="headerlink" title="c. 调用QJsonArray / QJsonObject 类提供api获取存储在其中的数据"></a>c. 调用QJsonArray / QJsonObject 类提供api获取存储在其中的数据</h4>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令</title>
    <link href="/b6ef4fe0.html"/>
    <url>/b6ef4fe0.html</url>
    
    <content type="html"><![CDATA[<h1 id="创建版本库命令"><a href="#创建版本库命令" class="headerlink" title="创建版本库命令"></a>创建版本库命令</h1><p>1.     <code>git init</code>      //设置仓库存放位置</p><p>2.     <code>git add</code>      // 将文件提交到暂存区</p><p>3.     <code>git commit</code>     //将文集提交到仓库</p><p>注意： 该命令添加 -m选项 可以输入本次提交的说明</p><p>例子：<code>git commit -m &quot;wrote a readme file&quot;</code></p><p>建议添加-m选项   指出本次提交 修改的说明  便于读取</p><p>4.     <code>git log</code>   //查看提交到仓库的记录</p><p>说明 ：上一个版本就是HEAD^，上上一个版本就是HEAD^^</p><p>100个版本写100个^比较容易数不过来，所以写成HEAD~100</p><p>5.     <code>git  reflog</code>  //查看每一次操作的命令</p><p>6.     <code>git  reset</code>    //回退到指定版本</p><p>7.     <code>git status</code>   //查看提交文件的状态</p><p>8.     <code>git checkout</code>  //撤销修改</p><p> 注意：该命令是用版本库里的版本替换工作区的版本</p><p>所以 ，显而易见   如果从来没有将该文件添加到版本库中，使用该命令是无法恢复的！</p><p>9.      <code>git  rm</code> //删除文件</p><p>注意：  <code>git commit -m</code>  使用删除命令后再使用该命令进行备注说明</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="远程仓库绑定步骤"><a href="#远程仓库绑定步骤" class="headerlink" title="远程仓库绑定步骤"></a>远程仓库绑定步骤</h2><p>安装git之后使用该命令为git添加用户名和邮件</p><p>10.   <code>$ git config --global user.name &quot;Your Name&quot;</code></p><p>11.   <code>$ git config --global user.email &quot;email@example.com&quot;</code></p><p>注意： <code>git config</code>命令的   –global参数，用了这个参数，</p><p>表示你这台机器上所有的Git仓库都会使用这个配置，</p><p>当然也可以对某个仓库指定不同的用户名和Email地址</p><p>12.    <code>git remote add origin      +    仓库地址  //添加远程仓库</code></p><p>说明：  origin为远程仓库名</p><p>13 .   <code>ssh-keygen -t rsa -C &quot;youremail@example&quot;.com&quot;</code>   //生成ssh认证秘钥</p><p>说明：读入该文件下  id_rsa.pub  的秘钥  到远程仓库进行绑定</p><p><code>/c/Users/zhang/AppData/Roaming/SPB_16.6/.ssh/id_rsa.pub</code></p><p>远程仓库绑定秘钥后   使用 ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a> 验证是否成功</p><h2 id="仓库提交下载命令操作"><a href="#仓库提交下载命令操作" class="headerlink" title="仓库提交下载命令操作"></a>仓库提交下载命令操作</h2><p>14.    <code>git  push   -u  origin  master</code> //将本地仓库内容推向远程仓库</p><p>注意：添加 -u参数  Git不但会把本地的master分支内容推送的远程新的master分支，</p><p>还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>15 .   <code>git clone     +     仓库地址</code>   //从远程仓库克隆（下载）</p>]]></content>
    
    
    <categories>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
